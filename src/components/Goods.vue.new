<template>
  <div class="goods">
  <div class="scroll-nav-wrapper">
    <cube-scroll-nav  :side="true" >
        <!-- slot start -->
         <template slot="bar" slot-scope="props">
          <cube-scroll-nav-bar 
            direction="vertical"
            :labels="props.labels"
            :txts="barTxts"
            :current="props.current"
          >
            <template slot-scope="props">
              <div class="text">
                
                <span>{{props.txt.name}}</span>
                <span class="num" v-if="props.txt.count">
                  <bubble :num="props.txt.count"></bubble>
                </span>
              </div>
            </template>
          </cube-scroll-nav-bar>
        </template>
        <!-- slot end -->
        
        
       <cube-scroll-nav-panel  ref="goodsTab"
          v-for="good in goods"
          :key="good.type"
          :label="good.type"
          :title="good.type"
        >
          <ul>
            <li
              v-for="food in good.items"
              :key="food.id"
              class="food-item"
            >
              <div class="icon"  @click="selectFood(food)">
                <img width="57" height="57" :src="food.image">
              </div>
              <div class="content">
                <h2 class="name"  @click="selectFood(food)">{{food.name}}</h2>
                <p class="desc">DDDD</p>
                <div class="extra">
                  <span class="count">月售12份</span><span>好评率89%</span>
                </div>
                <div class="price">
                  <span class="now" v-if="food.price_span">
                  ￥{{ food.price_span }}
                  </span>
                  <span class="now" v-else>
                  ￥{{ food.price }}
                  </span>
                  
                  
                </div>
                <div class="cart-control-wrapper">
                  <addcart :food="food" @add="onAdd" :key="index"></addcart>
                </div>
              </div>
            </li>
          </ul>
        </cube-scroll-nav-panel>
     
    </cube-scroll-nav>
  </div>
  
   <div class="shop-cart-wrapper">
      <mycart
        ref="shopCart"
        :selectFoods="selectFoods">
      </mycart>
    </div>
    
 </div>
</template>

<script>
import { getShopMers } from '../api'
import addcart from './addToCart/cart-control'
import mycart from './shop-cart/MyCart'
import Bubble from './bubble/bubble'
//import goodsData from '../datas/goods_list.json'
//const goods = goodsData.goods

export default {
  name: 'Goods',
  components: {
      Bubble,
      addcart,
      mycart 
    },
   
  data () {
    return {
       goods: [],
       selectedFood: {},
       barTxts:[],
       selectFoods:[],
       food_count:0
    }  
  },
  
  computed: {
     
      
    },
  
   
  
  methods: {
      
      //{type ,name, count}
      resetSelectFoods() {
         this.selectFoods = [];//先清空
         // 商品选中后,count属性累加
         this.goods.forEach((good) => {
           good.mers.forEach((food) => { //good.mers: 为规格商品保留
             if (food.count && food.count > 0) {
                this.selectFoods.push(food)
              }
          })
        })
        
        
      },
      //显示大分类的Label提示
      resetBarTxts() {
        this.barTxts = []
        this.goods.forEach((good) => {
          var foods = good.items;
          var mers =  good.mers;
          
          var type = good.type
          var name = good.type
          
          let count = 0
          mers.forEach((food) => {
            count += food.count || 0;
       
          })
          this.barTxts.push({
            type,
            name,
            count
          })
        })
        
         
      },
 
    // 更新集合[ {'type':'','items':[ {id,name,...count},...{..}]}, ... ]中的items集合对象中的count属性
    resetFoods(selectedFood){
          
          this.goods.forEach(good => {
          var mers = good.mers;//这个为规格商品的保留项
          var foods = good.items;
          var type = good.type
          var name = good.type
          //重置good.mers集合中商品的count属性
          for (var i=0;i< mers.length;i++){
             var food = mers[i]
             food.cout = 0;
             if (selectedFood.symbol){
                
                 if (selectedFood.id == food.id && selectedFood.symbol == food.symbol ){
                       
                      food.count = selectedFood.count;
                      food.symbol = selectedFood.symbol;
                      food.label = selectedFood.label;
                      break;
                 }
                 
             }else{
                 if (selectedFood.id == food.id ){
                     
                      food.count = selectedFood.count;
                      
                      break;
                }
             
             }
             
          } // 结束循环 mers 
          
          for(var j = 0;j<mers.length; j++){
             
              var t_mer = mers[j];
              if(t_mer.count > 0 ){
                 var index = foods.findIndex((t)=>t.id==t_mer.id);
                 alert('=> match index :'+index+',id='+t_mer.id+',count='+t_mer.count);
                 var temFood = foods[index];
                 temFood.count = t_mer.count;
                 if(t_mer.symbol){
                   temFood.symbol = t_mer.symbol;
                   temFood.attr_price = t_mer.attr_price;
                   temFood.label = t_mer.label;
                   
                 }
                 foods[index] = temFood;
              }
             
             
          
          }
          
          
            good.items = foods;
            good.mers = mers; //重置所有的规格商品
       
            
        });
        
        this.resetSelectFoods()
        this.resetBarTxts();
    
    }, 
    
    
    _getShopMers(){
       
        getShopMers({
          shopid: 2299
        }).then((res) => {
          
           if(res.status != 200){
             
             alert('==>服务器请求未响应，请检查网络环境<==');
             return false;
           }
           //alert(JSON.stringify(res.data));
           //console.log(JSON.stringify(res.data));
           var result =  res.data 
           var sorts = []
           if (result.resCode == '0'){
              var items  = result.items;
              items.forEach(item=>{
                sorts.push(item.sort);
              });
                            
              let types = new Set(sorts)
             
              /*根据商品的分类来展示商品，需要转换原有的数据结构
              
              "type":"炒面", "items":[
              
              { "id":2387,"name":"烩面","image":"","unit":"份","price":15, "attrs":[], "mer_attr_price":[] },
              
              ]
              */
              
              var mers = [] 
              types.forEach(type => {
                 mers.push({"type":type,"items":[],'mers':[]});
              });
               //所有的商品遍历,items: 所有的商品列表, mers: [{"type":xx,"items":[],"mers":[]},...]
              items.forEach(item=>{
                   //按商品种类Map遍历Map<k:sort,v:[]>
                   for( var i = 0; i<mers.length; i++){
                       var mer = mers[i];
                       if (item.sort == mer.type){
                           if (item.mer_attr_price.length > 0 ){//有规格商品
                              mer.items.push(item);
                              item.mer_attr_price.forEach(t => {
                     
                                 item.label = t.label;
                                 item.attr_price = t.price; //用mer_attr_price中的价格
                                 item.symbol = t.symbol;
                                 
                                 mer.mers.push({'id':item.id,'name':item.name,'price':item.price,'label':item.label,'attr_price':item.attr_price,'symbol':item.symbol});
                                 
                               });
                           }else{//没有规格的商品
                              mer.items.push(item);
                              mer.mers.push(item);
                           }
                            break;
                       }//end of item.sort == mer.type
                     
                   }// end of mers for 
                  
              });// 完成对mers更新
                 
              this.goods = mers;
              this.resetBarTxts(); //左边导航栏商品种类（选购商品数量）
              this.resetSelectFoods();//初始selectFoods集合 
           
           }else{
              alert(result.resMsg);
              
           }    
            
        })
      
      },
    

       //父组件的方法
      selectFood(food) {
        
        this.selectedFood = food
        alert('=>this.selectedFood:'+this.selectedFood.count);
        this.showFood()
        this.showShopCartSticky()
        this.$bus.emit('syncFood',food);
      },
      //food.vue中的addFoold事件,this.$emit(EVENT_ADD, target)
      //监听 cart-controll.vue中的事件
      onAdd (target,food,type) {
      
        
        this.selectedFood = food;
 
        this.$refs.shopCart.drop(target);
        
        if(type == 'cart-control'){ //来自cart-control中的事件
            if (this.selectedFood.attrs.length >= 1 ){ //规格商品在food.vue中处理
              this.showFood()
              this.showShopCartSticky()
            }else{ //无规格
                 if(this.selectedFood.count && this.selectedFood.count>0){
                    this.selectedFood.count++;
                 }else{
                   this.selectedFood.count = 1;
                 }
                 
            }
        }
        
        //重置 foods集合[{'type':xx,items:[]} ... ] 中mers中的商品对象的count值 
        this.resetFoods(this.selectedFood);
        
        
      },
      
      //createAPI
      showFood() {
        
        this.foodComp = this.foodComp || this.$createFood({
          $props: {
            food: 'selectedFood'
          },
          $events: {
          
            //接收food.vue ADD_EVENT事件
            add: (target,fd, type) => {
              this.shopCartStickyComp.drop(target)
               
              this.selectedFood = fd;
              alert('==> add inner this.selectedFood:'+JSON.stringify(this.selectedFood));
              this.resetFoods(this.selectedFood);
              this.$bus.emit('syncFood',fd);
              
            },
            
            leave: (fd) => {
              this.hideShopCartSticky();
              if(fd){
                
                this.selectedFood = fd;
                alert('=>leave receive:'+JSON.stringify(fd));
                this.resetFoods(this.selectedFood);
                
              }
              
            
            }
          }
        })
        this.foodComp.show()
       
      },
      //createAPI
      showShopCartSticky() {
        this.shopCartStickyComp = this.shopCartStickyComp || this.$createShopCartSticky({
          $props: {
            selectFoods: 'selectFoods',
            fold: true
          }
        })
        this.shopCartStickyComp.show()
      },
      hideShopCartSticky() {
        this.shopCartStickyComp.hide()
      }
      
      
      
      
      
   },
   
   created() {
     
      this._getShopMers();
      
    }
      
      
   
}
</script>


<style lang="stylus" scoped>
  @import "../common/stylus/variable"
  .goods
    position: relative
    text-align: left
    height: 100%
    
    .scroll-nav-wrapper
      position: absolute
      width: 100%
      top: 0
      left: 0
      bottom: 48px
    >>> .cube-scroll-nav-bar
      width: 80px
      white-space: normal
     
      overflow: hidden
    >>> .cube-scroll-nav-bar-item
      padding: 0 10px
      display: flex
      align-items: center
      height: 56px
      line-height: 14px
      font-size: $fontsize-small
      background: $color-background-ssss
     
      .text
        flex: 1
        position: relative
      .num
        position: absolute
        right: -8px
        top: -10px
      .support-ico
        display: inline-block
        vertical-align: top
        margin-right: 4px
    >>> .cube-scroll-nav-bar-item_active
      background: $color-white
      color: $color-dark-grey
    >>> .cube-scroll-nav-panel-title
      padding-left: 14px
      height: 26px
      line-height: 26px
      border-left: 2px solid $color-col-line
      font-size: $fontsize-small
      color: $color-grey
      background: $color-background-ssss
    .food-item
      display: flex
      margin: 18px
      padding-bottom: 18px
      position: relative
      &:last-child
        border-none()
        margin-bottom: 0
      .icon
        flex: 0 0 57px
        margin-right: 10px
        img
          height: auto
      .content
        flex: 1
        .name
          margin: 2px 0 8px 0
          height: 14px
          line-height: 14px
          font-size: $fontsize-medium
          color: $color-dark-grey
        .desc, .extra
          line-height: 10px
          font-size: $fontsize-small-s
          color: $color-light-grey
        .desc
          line-height: 12px
          margin-bottom: 8px
        .extra
          .count
            margin-right: 12px
        .price
          font-weight: 700
          line-height: 24px
          .now
            margin-right: 8px
            font-size: $fontsize-medium
            color: $color-red
          .old
            text-decoration: line-through
            font-size: $fontsize-small-s
            color: $color-light-grey
      .cart-control-wrapper
        position: absolute
        right: 0
        bottom: 12px
    .shop-cart-wrapper
      position: absolute
      left: 0
      bottom: 0
      z-index: 200
      width: 100%
      height: 48px
      
  
</style>
